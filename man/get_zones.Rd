% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatial.R
\name{get_zones}
\alias{get_zones}
\title{Core Spatial Analysis Functions for Spatial Analysis}
\usage{
get_zones(
  level = "dist",
  year = 2023,
  zones_filter = NULL,
  region_filter = NULL
)
}
\arguments{
\item{level}{Character. Administrative level to retrieve:
\itemize{
\item "dist" - Districts (default, recommended for users)
\item "prov" - Provinces
\item "muni" - Municipalities (detailed, large dataset)
}}

\item{year}{Numeric. Year for the boundaries (default: 2023). Available years depend on data source.}

\item{zones_filter}{Character vector. Optional filter for specific zone IDs.
If NULL (default), loads all zones. Examples: c("28079", "08019") for Madrid and Barcelona.}

\item{region_filter}{Character. Optional filter by region/province name or code.
Examples: "Madrid", "Barcelona", "28" (Madrid province). Automatically finds relevant zones.}
}
\value{
sf object with spatial zones containing:
\itemize{
\item geometry - Polygon geometries in WGS84 (EPSG:4326)
\item id - Zone identifier
\item area_km2 - Area in square kilometers
\item centroid - Zone centroid coordinates
}
}
\description{
This file contains the essential spatial analysis functions designed for
users learning spatial data science.
All functions automatically create spatial maps when possible.
Get spatial zones with geometries
}
\details{
Retrieves spatial zones (administrative boundaries) with geometries for mapping.
Simplified for user convenience with automatic CRS handling and basic spatial statistics.
Includes filtering options to load subsets of zones.

This function automatically:
\itemize{
\item Downloads spatial boundaries from Spanish government sources
\item Transforms to WGS84 for consistent mapping
\item Calculates area and centroid for each zone
\item Validates spatial geometries
}
}
\examples{
\dontrun{
# Get all district boundaries (default)
zones <- get_zones(level = "dist")

# Get specific zones only (reduces memory usage)
madrid_barcelona <- get_zones(
  level = "dist", 
  zones_filter = c("28079", "08019")  # Madrid and Barcelona
)

# Get zones for a specific region
madrid_zones <- get_zones(
  level = "dist",
  region_filter = "Madrid"
)

# Get zones by province code
valencia_zones <- get_zones(
  level = "dist",
  region_filter = "46"  # Valencia province
)

# Get province boundaries
provinces <- get_zones(level = "prov", year = 2023)

# Quick map of zones
plot(zones$geometry)

# Check zone information
head(zones)
summary(zones$area_km2)
}
}
