% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatial.R
\name{get_zones}
\alias{get_zones}
\title{Get spatial zones with geometries}
\usage{
get_zones(
  level = "dist",
  year = 2023,
  zones_filter = NULL,
  region_filter = NULL,
  city_filter = NULL,
  buffer_km = NULL,
  include_neighbors = TRUE
)
}
\arguments{
\item{level}{Character. Administrative level to retrieve:
\itemize{
\item "dist" - Districts (default, recommended for users)
\item "prov" - Provinces
\item "muni" - Municipalities (detailed, large dataset)
}}

\item{year}{Numeric. Year for the boundaries (default: 2023). Available years depend on data source.}

\item{zones_filter}{Character vector. Optional filter for specific zone IDs.
If NULL (default), loads all zones. Examples:
\itemize{
\item c("2801301", "08251") for specific districts
\item c("28", "08") for all zones in Madrid/Barcelona provinces (prefix matching)
\item c("28079", "08019") will use prefix matching to find Madrid/Barcelona zones
}}

\item{region_filter}{Character. Optional filter by region/province name or code.
Examples: "Madrid", "Barcelona", "28" (Madrid province). Automatically finds relevant zones.}

\item{city_filter}{Character vector. Optional filter by city names.
Examples: c("Madrid", "Barcelona", "Valencia", "Sevilla"). Case-insensitive matching.}

\item{buffer_km}{Numeric. Optional buffer distance in kilometers around selected zones
to create functional urban areas. Default is NULL (no buffer). Examples: 15, 20, 30.}

\item{include_neighbors}{Logical. If TRUE and buffer_km is specified, includes
neighboring zones within the buffer distance (default: TRUE).}
}
\value{
sf object with spatial zones containing:
\itemize{
\item geometry - Polygon geometries in WGS84 (EPSG:4326)
\item id - Zone identifier
\item area_km2 - Area in square kilometers
\item centroid - Zone centroid coordinates
}
}
\description{
Retrieves spatial zones (administrative boundaries) with geometries for mapping.
Simplified for user convenience with automatic CRS handling and basic spatial statistics.
Includes filtering options to load subsets of zones.
}
\details{
This function automatically:
\itemize{
\item Downloads spatial boundaries from Spanish government sources
\item Transforms to WGS84 for consistent mapping
\item Calculates area and centroid for each zone
\item Validates spatial geometries
}
}
\examples{
\dontrun{
# Get all district boundaries (default)
zones <- get_zones(level = "dist")

# Get specific zones only (reduces memory usage)
madrid_barcelona <- get_zones(
  level = "dist", 
  zones_filter = c("28", "08")  # Madrid and Barcelona provinces (prefix matching)
)

# Get zones by city names with functional urban area buffer
madrid_valencia <- get_zones(
  level = "dist",
  city_filter = c("Madrid", "Valencia"),
  buffer_km = 20  # 20km functional urban area
)

# Get multiple cities without buffer
major_cities <- get_zones(
  level = "dist",
  city_filter = c("Madrid", "Barcelona", "Valencia", "Sevilla")
)

# Get zones for a specific region
madrid_zones <- get_zones(
  level = "dist",
  region_filter = "Madrid"
)

# Get zones by province code
valencia_zones <- get_zones(
  level = "dist",
  region_filter = "46"  # Valencia province
)

# Get province boundaries
provinces <- get_zones(level = "prov", year = 2023)

# Quick map of zones
plot(zones$geometry)

# Check zone information
head(zones)
summary(zones$area_km2)
}
}
